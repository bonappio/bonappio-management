//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bonappio.Areas.Account.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class baioEntities : DbContext
    {
        public baioEntities()
            : base("name=baioEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admin { get; set; }
        public virtual DbSet<Authority> Authority { get; set; }
        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Firm> Firm { get; set; }
        public virtual DbSet<Images> Images { get; set; }
        public virtual DbSet<ImageType> ImageType { get; set; }
        public virtual DbSet<Log> Log { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<OrderProduct> OrderProduct { get; set; }
        public virtual DbSet<Payment> Payment { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductFeature> ProductFeature { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Table> Table { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserTable> UserTable { get; set; }
    
        public virtual ObjectResult<Nullable<int>> sp_AdminAdd(Nullable<int> firmID, string name, string surname, string email, string username, string password, string photo, Nullable<System.DateTime> lastLoginDate, Nullable<bool> isManager)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var isManagerParameter = isManager.HasValue ?
                new ObjectParameter("IsManager", isManager) :
                new ObjectParameter("IsManager", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AdminAdd", firmIDParameter, nameParameter, surnameParameter, emailParameter, usernameParameter, passwordParameter, photoParameter, lastLoginDateParameter, isManagerParameter);
        }
    
        public virtual int sp_AdminAuthorityAdd(Nullable<int> adminID, Nullable<int> authorityID)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            var authorityIDParameter = authorityID.HasValue ?
                new ObjectParameter("AuthorityID", authorityID) :
                new ObjectParameter("AuthorityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AdminAuthorityAdd", adminIDParameter, authorityIDParameter);
        }
    
        public virtual int sp_AdminAuthorityDelete(Nullable<int> adminID)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AdminAuthorityDelete", adminIDParameter);
        }
    
        public virtual int sp_AdminDeleteRecover(Nullable<int> iD, Nullable<bool> isDelete)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AdminDeleteRecover", iDParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<sp_AdminGet_Result> sp_AdminGet(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminGet_Result>("sp_AdminGet", iDParameter);
        }
    
        public virtual ObjectResult<sp_AdminGetAll_Result> sp_AdminGetAll(Nullable<int> firmID, Nullable<bool> isDelete)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminGetAll_Result>("sp_AdminGetAll", firmIDParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<sp_AdminGetAllbyPaging_Result> sp_AdminGetAllbyPaging(Nullable<int> page, Nullable<int> pageSize, Nullable<int> firmID, Nullable<bool> isDelete)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminGetAllbyPaging_Result>("sp_AdminGetAllbyPaging", pageParameter, pageSizeParameter, firmIDParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<sp_AdminIsExists_Result> sp_AdminIsExists(Nullable<int> firmID, string username, string password)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_AdminIsExists_Result>("sp_AdminIsExists", firmIDParameter, usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_AdminPasswordEquals(Nullable<int> iD, string password)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_AdminPasswordEquals", iDParameter, passwordParameter);
        }
    
        public virtual int sp_AdminPasswordUpdate(Nullable<int> iD, string password)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AdminPasswordUpdate", iDParameter, passwordParameter);
        }
    
        public virtual int sp_AdminUpdate(Nullable<int> iD, string name, string surname, string email, string username, string password)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AdminUpdate", iDParameter, nameParameter, surnameParameter, emailParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_CategoryAdd(Nullable<int> firmID, Nullable<int> categoryID, string name, string type, string rank)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var rankParameter = rank != null ?
                new ObjectParameter("Rank", rank) :
                new ObjectParameter("Rank", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CategoryAdd", firmIDParameter, categoryIDParameter, nameParameter, typeParameter, rankParameter);
        }
    
        public virtual int sp_CategoryDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CategoryDelete", iDParameter);
        }
    
        public virtual int sp_CategoryDestroy(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CategoryDestroy", iDParameter);
        }
    
        public virtual ObjectResult<sp_CategoryGet_Result> sp_CategoryGet(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CategoryGet_Result>("sp_CategoryGet", iDParameter);
        }
    
        public virtual ObjectResult<sp_CategoryGetAll_Result> sp_CategoryGetAll(Nullable<int> firmID, string type)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CategoryGetAll_Result>("sp_CategoryGetAll", firmIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_CategoryGetAllbyPaging_Result> sp_CategoryGetAllbyPaging(Nullable<int> page, Nullable<int> pageSize, Nullable<int> firmID, string type, Nullable<bool> isDelete)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CategoryGetAllbyPaging_Result>("sp_CategoryGetAllbyPaging", pageParameter, pageSizeParameter, firmIDParameter, typeParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_CategoryNameControl(string name, Nullable<int> firmID, string type)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CategoryNameControl", nameParameter, firmIDParameter, typeParameter);
        }
    
        public virtual int sp_CategoryRankUpdate(Nullable<int> iD, Nullable<int> rank)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var rankParameter = rank.HasValue ?
                new ObjectParameter("Rank", rank) :
                new ObjectParameter("Rank", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CategoryRankUpdate", iDParameter, rankParameter);
        }
    
        public virtual int sp_CategoryRecover(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CategoryRecover", iDParameter);
        }
    
        public virtual int sp_CategoryUpdate(Nullable<int> iD, string name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CategoryUpdate", iDParameter, nameParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_FirmAdd(string name, string bossName, string address, string email, string phone, string gSM, Nullable<System.DateTime> cutoffDate, Nullable<int> categoryID, string password, string logo, string mapX, string mapY, string mapAddress)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var bossNameParameter = bossName != null ?
                new ObjectParameter("BossName", bossName) :
                new ObjectParameter("BossName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var gSMParameter = gSM != null ?
                new ObjectParameter("GSM", gSM) :
                new ObjectParameter("GSM", typeof(string));
    
            var cutoffDateParameter = cutoffDate.HasValue ?
                new ObjectParameter("CutoffDate", cutoffDate) :
                new ObjectParameter("CutoffDate", typeof(System.DateTime));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var mapXParameter = mapX != null ?
                new ObjectParameter("MapX", mapX) :
                new ObjectParameter("MapX", typeof(string));
    
            var mapYParameter = mapY != null ?
                new ObjectParameter("MapY", mapY) :
                new ObjectParameter("MapY", typeof(string));
    
            var mapAddressParameter = mapAddress != null ?
                new ObjectParameter("MapAddress", mapAddress) :
                new ObjectParameter("MapAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_FirmAdd", nameParameter, bossNameParameter, addressParameter, emailParameter, phoneParameter, gSMParameter, cutoffDateParameter, categoryIDParameter, passwordParameter, logoParameter, mapXParameter, mapYParameter, mapAddressParameter);
        }
    
        public virtual int sp_FirmDeleteRecover(Nullable<int> iD, Nullable<bool> isDelete)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FirmDeleteRecover", iDParameter, isDeleteParameter);
        }
    
        public virtual int sp_FirmDestroy(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FirmDestroy", iDParameter);
        }
    
        public virtual ObjectResult<sp_FirmGet_Result> sp_FirmGet(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FirmGet_Result>("sp_FirmGet", iDParameter);
        }
    
        public virtual ObjectResult<sp_FirmGetAll_Result> sp_FirmGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FirmGetAll_Result>("sp_FirmGetAll");
        }
    
        public virtual ObjectResult<sp_FirmGetAllbyPaging_Result> sp_FirmGetAllbyPaging(Nullable<int> page, Nullable<int> pageSize, Nullable<int> categoryID, Nullable<bool> isDelete)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_FirmGetAllbyPaging_Result>("sp_FirmGetAllbyPaging", pageParameter, pageSizeParameter, categoryIDParameter, isDeleteParameter);
        }
    
        public virtual int sp_FirmImageDelete(Nullable<int> firmID, Nullable<int> imageID)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FirmImageDelete", firmIDParameter, imageIDParameter);
        }
    
        public virtual int sp_FirmImagesAdd(Nullable<int> firmID, Nullable<int> imageID)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FirmImagesAdd", firmIDParameter, imageIDParameter);
        }
    
        public virtual ObjectResult<string> sp_FirmImagesGet(Nullable<int> firmID, Nullable<int> imageTypeID)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var imageTypeIDParameter = imageTypeID.HasValue ?
                new ObjectParameter("ImageTypeID", imageTypeID) :
                new ObjectParameter("ImageTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_FirmImagesGet", firmIDParameter, imageTypeIDParameter);
        }
    
        public virtual int sp_FirmUpdate(Nullable<int> iD, string name, string bossName, string address, string email, string phone, string gSM, Nullable<System.DateTime> cutoffDate, Nullable<int> categoryID, string password, string logo, string mapX, string mapY, string mapAddress)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var bossNameParameter = bossName != null ?
                new ObjectParameter("BossName", bossName) :
                new ObjectParameter("BossName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var gSMParameter = gSM != null ?
                new ObjectParameter("GSM", gSM) :
                new ObjectParameter("GSM", typeof(string));
    
            var cutoffDateParameter = cutoffDate.HasValue ?
                new ObjectParameter("CutoffDate", cutoffDate) :
                new ObjectParameter("CutoffDate", typeof(System.DateTime));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var mapXParameter = mapX != null ?
                new ObjectParameter("MapX", mapX) :
                new ObjectParameter("MapX", typeof(string));
    
            var mapYParameter = mapY != null ?
                new ObjectParameter("MapY", mapY) :
                new ObjectParameter("MapY", typeof(string));
    
            var mapAddressParameter = mapAddress != null ?
                new ObjectParameter("MapAddress", mapAddress) :
                new ObjectParameter("MapAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FirmUpdate", iDParameter, nameParameter, bossNameParameter, addressParameter, emailParameter, phoneParameter, gSMParameter, cutoffDateParameter, categoryIDParameter, passwordParameter, logoParameter, mapXParameter, mapYParameter, mapAddressParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<string> sp_ImageGetSrc(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_ImageGetSrc", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ImagesAdd(string src, Nullable<int> imageTypeID, Nullable<int> rank)
        {
            var srcParameter = src != null ?
                new ObjectParameter("Src", src) :
                new ObjectParameter("Src", typeof(string));
    
            var imageTypeIDParameter = imageTypeID.HasValue ?
                new ObjectParameter("ImageTypeID", imageTypeID) :
                new ObjectParameter("ImageTypeID", typeof(int));
    
            var rankParameter = rank.HasValue ?
                new ObjectParameter("Rank", rank) :
                new ObjectParameter("Rank", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ImagesAdd", srcParameter, imageTypeIDParameter, rankParameter);
        }
    
        public virtual int sp_ImagesDeleteRecover(Nullable<int> iD, Nullable<bool> isDelete)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ImagesDeleteRecover", iDParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<sp_ImagesGet_Result> sp_ImagesGet(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ImagesGet_Result>("sp_ImagesGet", iDParameter);
        }
    
        public virtual int sp_ImageSrcUpdate(Nullable<int> iD, string src)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var srcParameter = src != null ?
                new ObjectParameter("Src", src) :
                new ObjectParameter("Src", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ImageSrcUpdate", iDParameter, srcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_NotificationAdd(Nullable<int> firmID, string text, string uRL, Nullable<int> userID)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var textParameter = text != null ?
                new ObjectParameter("Text", text) :
                new ObjectParameter("Text", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_NotificationAdd", firmIDParameter, textParameter, uRLParameter, userIDParameter);
        }
    
        public virtual int sp_NotificationDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotificationDelete", iDParameter);
        }
    
        public virtual ObjectResult<sp_NotificationGetAllbyPaging_Result> sp_NotificationGetAllbyPaging(Nullable<int> firmID, Nullable<int> userID, Nullable<int> page, Nullable<int> pageSize)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_NotificationGetAllbyPaging_Result>("sp_NotificationGetAllbyPaging", firmIDParameter, userIDParameter, pageParameter, pageSizeParameter);
        }
    
        public virtual int sp_NotificationSetReaded(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotificationSetReaded", iDParameter);
        }
    
        public virtual int sp_NotificationSetViewed(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NotificationSetViewed", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_OrderAdd(Nullable<int> firmID, Nullable<int> tableID, Nullable<int> statusID, Nullable<System.DateTime> startDate, Nullable<int> userID, string description)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var tableIDParameter = tableID.HasValue ?
                new ObjectParameter("TableID", tableID) :
                new ObjectParameter("TableID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_OrderAdd", firmIDParameter, tableIDParameter, statusIDParameter, startDateParameter, userIDParameter, descriptionParameter);
        }
    
        public virtual int sp_OrderDeleteRecover(Nullable<int> iD, Nullable<bool> isDelete)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OrderDeleteRecover", iDParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<sp_OrderGetAllbyPaging_Result> sp_OrderGetAllbyPaging(Nullable<int> page, Nullable<int> pageSize, Nullable<int> statusID, Nullable<bool> isDelete, Nullable<int> firmID)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OrderGetAllbyPaging_Result>("sp_OrderGetAllbyPaging", pageParameter, pageSizeParameter, statusIDParameter, isDeleteParameter, firmIDParameter);
        }
    
        public virtual int sp_OrderProductAdd(Nullable<int> orderID, Nullable<int> productID, Nullable<int> productFeatureID, Nullable<int> quantity)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productFeatureIDParameter = productFeatureID.HasValue ?
                new ObjectParameter("ProductFeatureID", productFeatureID) :
                new ObjectParameter("ProductFeatureID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OrderProductAdd", orderIDParameter, productIDParameter, productFeatureIDParameter, quantityParameter);
        }
    
        public virtual int sp_OrderProductDelete(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OrderProductDelete", orderIDParameter);
        }
    
        public virtual ObjectResult<sp_OrderProductsGet_Result> sp_OrderProductsGet(Nullable<int> orderID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_OrderProductsGet_Result>("sp_OrderProductsGet", orderIDParameter);
        }
    
        public virtual int sp_OrderSetStatus(Nullable<int> iD, Nullable<int> statusID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_OrderSetStatus", iDParameter, statusIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ProductAdd(Nullable<int> firmID, Nullable<int> categoryID, string name, string ingredients, Nullable<decimal> cost, Nullable<decimal> price, Nullable<int> stock, string imageSrc, Nullable<int> criticalStock)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var ingredientsParameter = ingredients != null ?
                new ObjectParameter("Ingredients", ingredients) :
                new ObjectParameter("Ingredients", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            var imageSrcParameter = imageSrc != null ?
                new ObjectParameter("ImageSrc", imageSrc) :
                new ObjectParameter("ImageSrc", typeof(string));
    
            var criticalStockParameter = criticalStock.HasValue ?
                new ObjectParameter("CriticalStock", criticalStock) :
                new ObjectParameter("CriticalStock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ProductAdd", firmIDParameter, categoryIDParameter, nameParameter, ingredientsParameter, costParameter, priceParameter, stockParameter, imageSrcParameter, criticalStockParameter);
        }
    
        public virtual int sp_ProductDeleteRecover(Nullable<int> iD, Nullable<bool> isDelete)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProductDeleteRecover", iDParameter, isDeleteParameter);
        }
    
        public virtual int sp_ProductDestroy(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProductDestroy", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ProductFeatureAdd(Nullable<int> firmID, Nullable<int> productID, string name, Nullable<decimal> priceDifference)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var priceDifferenceParameter = priceDifference.HasValue ?
                new ObjectParameter("PriceDifference", priceDifference) :
                new ObjectParameter("PriceDifference", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ProductFeatureAdd", firmIDParameter, productIDParameter, nameParameter, priceDifferenceParameter);
        }
    
        public virtual ObjectResult<sp_ProductGet_Result> sp_ProductGet(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductGet_Result>("sp_ProductGet", iDParameter);
        }
    
        public virtual ObjectResult<sp_ProductGetAllbyPaging_Result> sp_ProductGetAllbyPaging(Nullable<int> page, Nullable<int> pageSize, Nullable<int> categoryID, Nullable<bool> isDelete, Nullable<int> firmID)
        {
            var pageParameter = page.HasValue ?
                new ObjectParameter("Page", page) :
                new ObjectParameter("Page", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductGetAllbyPaging_Result>("sp_ProductGetAllbyPaging", pageParameter, pageSizeParameter, categoryIDParameter, isDeleteParameter, firmIDParameter);
        }
    
        public virtual int sp_ProductImageDelete(Nullable<int> productID, Nullable<int> imageID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProductImageDelete", productIDParameter, imageIDParameter);
        }
    
        public virtual int sp_ProductImagesAdd(Nullable<int> productID, Nullable<int> imageID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("ImageID", imageID) :
                new ObjectParameter("ImageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProductImagesAdd", productIDParameter, imageIDParameter);
        }
    
        public virtual ObjectResult<string> sp_ProductImagesGet(Nullable<int> productID, Nullable<int> imageTypeID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var imageTypeIDParameter = imageTypeID.HasValue ?
                new ObjectParameter("ImageTypeID", imageTypeID) :
                new ObjectParameter("ImageTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_ProductImagesGet", productIDParameter, imageTypeIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ProductNameControl(Nullable<int> name, Nullable<int> firmID, Nullable<int> categoryID)
        {
            var nameParameter = name.HasValue ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(int));
    
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ProductNameControl", nameParameter, firmIDParameter, categoryIDParameter);
        }
    
        public virtual int sp_ProductRankControl(Nullable<int> iD, Nullable<int> rank)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var rankParameter = rank.HasValue ?
                new ObjectParameter("Rank", rank) :
                new ObjectParameter("Rank", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProductRankControl", iDParameter, rankParameter);
        }
    
        public virtual int sp_ProductSetAP(Nullable<int> iD, Nullable<bool> isActive)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProductSetAP", iDParameter, isActiveParameter);
        }
    
        public virtual int sp_ProductUpdate(Nullable<int> iD, string name, string ingredients, Nullable<decimal> cost, Nullable<decimal> price, Nullable<int> stock, string imageSrc, Nullable<int> criticalStock, Nullable<int> rank)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var ingredientsParameter = ingredients != null ?
                new ObjectParameter("Ingredients", ingredients) :
                new ObjectParameter("Ingredients", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(int));
    
            var imageSrcParameter = imageSrc != null ?
                new ObjectParameter("ImageSrc", imageSrc) :
                new ObjectParameter("ImageSrc", typeof(string));
    
            var criticalStockParameter = criticalStock.HasValue ?
                new ObjectParameter("CriticalStock", criticalStock) :
                new ObjectParameter("CriticalStock", typeof(int));
    
            var rankParameter = rank.HasValue ?
                new ObjectParameter("Rank", rank) :
                new ObjectParameter("Rank", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProductUpdate", iDParameter, nameParameter, ingredientsParameter, costParameter, priceParameter, stockParameter, imageSrcParameter, criticalStockParameter, rankParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_TableAdd(Nullable<int> firmID, string name, string code)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_TableAdd", firmIDParameter, nameParameter, codeParameter);
        }
    
        public virtual int sp_TableDeleteRecover(Nullable<int> iD, Nullable<bool> isDelete)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var isDeleteParameter = isDelete.HasValue ?
                new ObjectParameter("IsDelete", isDelete) :
                new ObjectParameter("IsDelete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TableDeleteRecover", iDParameter, isDeleteParameter);
        }
    
        public virtual ObjectResult<sp_TableGet_Result> sp_TableGet(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TableGet_Result>("sp_TableGet", iDParameter);
        }
    
        public virtual ObjectResult<sp_TableGetAll_Result> sp_TableGetAll(Nullable<int> firmID)
        {
            var firmIDParameter = firmID.HasValue ?
                new ObjectParameter("FirmID", firmID) :
                new ObjectParameter("FirmID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TableGetAll_Result>("sp_TableGetAll", firmIDParameter);
        }
    
        public virtual int sp_TableSetStatus(Nullable<int> iD, Nullable<int> statusID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TableSetStatus", iDParameter, statusIDParameter);
        }
    
        public virtual int sp_TableUpdate(Nullable<int> iD, string name, string code)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TableUpdate", iDParameter, nameParameter, codeParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
